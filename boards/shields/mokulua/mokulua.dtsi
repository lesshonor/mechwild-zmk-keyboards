/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/matrix_transform.h>

/ {
    chosen {
        zephyr,display = &oled;
        zmk,kscan = &kscan;
        zmk,matrix-transform = &standard_all_transform;
    };

    standard_all_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <12>;
        rows = <6>;

        map = <
RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(5,5)                     RC(5,6) RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11)
RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(5,4)                             RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11)
RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(5,3)                     RC(5,7) RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11)
RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(5,1) RC(5,2)     RC(5,9) RC(5,8) RC(3,6) RC(3,7) RC(3,8) RC(3,9) RC(3,10) RC(3,11)
RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(5,0)                    RC(5,10) RC(4,6) RC(4,7) RC(4,8) RC(4,9) RC(4,10) RC(4,11)
        >;
    };

    standard_full_backspace_transform: keymap_transform_1 {
        compatible = "zmk,matrix-transform";
        columns = <12>;
        rows = <6>;

        map = <
RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(5,5)                     RC(5,6) RC(0,6) RC(0,7) RC(0,8) RC(0,9)     RC(0,10)
RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(5,4)                             RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11)
RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(5,3)                     RC(5,7) RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11)
RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(5,1) RC(5,2)     RC(5,9) RC(5,8) RC(3,6) RC(3,7) RC(3,8) RC(3,9) RC(3,10) RC(3,11)
RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(5,0)                    RC(5,10) RC(4,6) RC(4,7) RC(4,8) RC(4,9) RC(4,10) RC(4,11)
        >;
    };

    standard_full_lshift_transform: keymap_transform_2 {
        compatible = "zmk,matrix-transform";
        columns = <12>;
        rows = <6>;

        map = <
RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(5,5)                     RC(5,6) RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11)
RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(5,4)                             RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11)
RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(5,3)                     RC(5,7) RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11)
    RC(3,0)     RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(5,1) RC(5,2)     RC(5,9) RC(5,8) RC(3,6) RC(3,7) RC(3,8) RC(3,9) RC(3,10) RC(3,11)
RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(5,0)                    RC(5,10) RC(4,6) RC(4,7) RC(4,8) RC(4,9) RC(4,10) RC(4,11)
        >;
    };

    standard_full_rshift_transform: keymap_transform_3 {
        compatible = "zmk,matrix-transform";
        columns = <12>;
        rows = <6>;

        map = <
RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(5,5)                     RC(5,6) RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11)
RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(5,4)                             RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11)
RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(5,3)                     RC(5,7) RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11)
RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(5,1) RC(5,2)     RC(5,9) RC(5,8) RC(3,6) RC(3,7) RC(3,8) RC(3,9)      RC(3,11)
RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(5,0)                    RC(5,10) RC(4,6) RC(4,7) RC(4,8) RC(4,9) RC(4,10) RC(4,11)
        >;
    };

    standard_full_backspace_full_lshift_transform: keymap_transform_4 {
        compatible = "zmk,matrix-transform";
        columns = <12>;
        rows = <6>;

        map = <
RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(5,5)                     RC(5,6) RC(0,6) RC(0,7) RC(0,8) RC(0,9)     RC(0,10)
RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(5,4)                             RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11)
RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(5,3)                     RC(5,7) RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11)
    RC(3,0)     RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(5,1) RC(5,2)     RC(5,9) RC(5,8) RC(3,6) RC(3,7) RC(3,8) RC(3,9) RC(3,10) RC(3,11)
RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(5,0)                    RC(5,10) RC(4,6) RC(4,7) RC(4,8) RC(4,9) RC(4,10) RC(4,11)
        >;
    };

    standard_full_backspace_full_rshift_transform: keymap_transform_5 {
        compatible = "zmk,matrix-transform";
        columns = <12>;
        rows = <6>;

        map = <
RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(5,5)                     RC(5,6) RC(0,6) RC(0,7) RC(0,8) RC(0,9)     RC(0,10)
RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(5,4)                             RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11)
RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(5,3)                     RC(5,7) RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11)
RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(5,1) RC(5,2)     RC(5,9) RC(5,8) RC(3,6) RC(3,7) RC(3,8) RC(3,9)      RC(3,11)
RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(5,0)                    RC(5,10) RC(4,6) RC(4,7) RC(4,8) RC(4,9) RC(4,10) RC(4,11)
        >;
    };

    standard_full_backspace_full_lshift_full_rshift_transform: keymap_transform_6 {
        compatible = "zmk,matrix-transform";
        columns = <12>;
        rows = <6>;

        map = <
RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(5,5)                     RC(5,6) RC(0,6) RC(0,7) RC(0,8) RC(0,9)     RC(0,10)
RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(5,4)                             RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11)
RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(5,3)                     RC(5,7) RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11)
    RC(3,0)     RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(5,1) RC(5,2)     RC(5,9) RC(5,8) RC(3,6) RC(3,7) RC(3,8) RC(3,9)      RC(3,11)
RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(5,0)                    RC(5,10) RC(4,6) RC(4,7) RC(4,8) RC(4,9) RC(4,10) RC(4,11)
        >;
    };

    mirrored_all_transform: keymap_transform_7 {
        compatible = "zmk,matrix-transform";
        columns = <12>;
        rows = <6>;

        map = <
RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(5,5)                     RC(5,11) RC(0,11) RC(0,10) RC(0,9) RC(0,8) RC(0,7) RC(0,6)
RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(5,4)                     RC(5,10) RC(1,11) RC(1,10) RC(1,9) RC(1,8) RC(1,7) RC(1,6)
RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(5,3)                      RC(5,9) RC(2,11) RC(2,10) RC(2,9) RC(2,8) RC(2,7) RC(2,6)
RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(5,1) RC(5,2)     RC(5,8)  RC(5,7) RC(3,11) RC(3,10) RC(3,9) RC(3,8) RC(3,7) RC(3,6)
RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(5,0)                      RC(5,6) RC(4,11) RC(4,10) RC(4,9) RC(4,8) RC(4,7) RC(4,6)
        >;
    };

    mirrored_full_backspace_transform: keymap_transform_8 {
        compatible = "zmk,matrix-transform";
        columns = <12>;
        rows = <6>;

        map = <
RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(5,5)                     RC(5,11) RC(0,11) RC(0,10) RC(0,9) RC(0,8)     RC(0,6)
RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(5,4)                     RC(5,10) RC(1,11) RC(1,10) RC(1,9) RC(1,8) RC(1,7) RC(1,6)
RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(5,3)                      RC(5,9) RC(2,11) RC(2,10) RC(2,9) RC(2,8) RC(2,7) RC(2,6)
RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(5,1) RC(5,2)     RC(5,8)  RC(5,7) RC(3,11) RC(3,10) RC(3,9) RC(3,8) RC(3,7) RC(3,6)
RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(5,0)                      RC(5,6) RC(4,11) RC(4,10) RC(4,9) RC(4,8) RC(4,7) RC(4,6)
        >;
    };

    mirrored_full_lshift_transform: keymap_transform_9 {
        compatible = "zmk,matrix-transform";
        columns = <12>;
        rows = <6>;

        map = <
RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(5,5)                     RC(5,11) RC(0,11) RC(0,10) RC(0,9) RC(0,8) RC(0,7) RC(0,6)
RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(5,4)                     RC(5,10) RC(1,11) RC(1,10) RC(1,9) RC(1,8) RC(1,7) RC(1,6)
RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(5,3)                      RC(5,9) RC(2,11) RC(2,10) RC(2,9) RC(2,8) RC(2,7) RC(2,6)
    RC(3,0)     RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(5,1) RC(5,2)     RC(5,8)  RC(5,7) RC(3,11) RC(3,10) RC(3,9) RC(3,8) RC(3,7) RC(3,6)
RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(5,0)                      RC(5,6) RC(4,11) RC(4,10) RC(4,9) RC(4,8) RC(4,7) RC(4,6)
        >;
    };

    mirrored_full_rshift_transform: keymap_transform_10 {
        compatible = "zmk,matrix-transform";
        columns = <12>;
        rows = <6>;

        map = <
RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(5,5)                     RC(5,11) RC(0,11) RC(0,10) RC(0,9) RC(0,8) RC(0,7) RC(0,6)
RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(5,4)                     RC(5,10) RC(1,11) RC(1,10) RC(1,9) RC(1,8) RC(1,7) RC(1,6)
RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(5,3)                      RC(5,9) RC(2,11) RC(2,10) RC(2,9) RC(2,8) RC(2,7) RC(2,6)
RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(5,1) RC(5,2)     RC(5,8)  RC(5,7) RC(3,11) RC(3,10) RC(3,9) RC(3,8)     RC(3,6)
RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(5,0)                      RC(5,6) RC(4,11) RC(4,10) RC(4,9) RC(4,8) RC(4,7) RC(4,6)
        >;
    };

    mirrored_full_backspace_full_lshift_transform: keymap_transform_11 {
        compatible = "zmk,matrix-transform";
        columns = <12>;
        rows = <6>;

        map = <
RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(5,5)                     RC(5,11) RC(0,11) RC(0,10) RC(0,9) RC(0,8)     RC(0,6)
RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(5,4)                     RC(5,10) RC(1,11) RC(1,10) RC(1,9) RC(1,8) RC(1,7) RC(1,6)
RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(5,3)                      RC(5,9) RC(2,11) RC(2,10) RC(2,9) RC(2,8) RC(2,7) RC(2,6)
    RC(3,0)     RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(5,1) RC(5,2)     RC(5,8)  RC(5,7) RC(3,11) RC(3,10) RC(3,9) RC(3,8) RC(3,7) RC(3,6)
RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(5,0)                      RC(5,6) RC(4,11) RC(4,10) RC(4,9) RC(4,8) RC(4,7) RC(4,6)
        >;
    };

    mirrored_full_backspace_full_rshift_transform: keymap_transform_12 {
        compatible = "zmk,matrix-transform";
        columns = <12>;
        rows = <6>;

        map = <
RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(5,5)                     RC(5,11) RC(0,11) RC(0,10) RC(0,9) RC(0,8)     RC(0,6)
RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(5,4)                     RC(5,10) RC(1,11) RC(1,10) RC(1,9) RC(1,8) RC(1,7) RC(1,6)
RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(5,3)                      RC(5,9) RC(2,11) RC(2,10) RC(2,9) RC(2,8) RC(2,7) RC(2,6)
RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(5,1) RC(5,2)     RC(5,8)  RC(5,7) RC(3,11) RC(3,10) RC(3,9) RC(3,8)     RC(3,6)
RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(5,0)                      RC(5,6) RC(4,11) RC(4,10) RC(4,9) RC(4,8) RC(4,7) RC(4,6)
        >;
    };

    mirrored_full_backspace_full_lshift_full_rshift_transform: keymap_transform_13 {
        compatible = "zmk,matrix-transform";
        columns = <12>;
        rows = <6>;

        map = <
RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(5,5)                     RC(5,11) RC(0,11) RC(0,10) RC(0,9) RC(0,8)     RC(0,6)
RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(5,4)                     RC(5,10) RC(1,11) RC(1,10) RC(1,9) RC(1,8) RC(1,7) RC(1,6)
RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(5,3)                      RC(5,9) RC(2,11) RC(2,10) RC(2,9) RC(2,8) RC(2,7) RC(2,6)
    RC(3,0)     RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(5,1) RC(5,2)     RC(5,8)  RC(5,7) RC(3,11) RC(3,10) RC(3,9) RC(3,8)     RC(3,6)
RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(5,0)                      RC(5,6) RC(4,11) RC(4,10) RC(4,9) RC(4,8) RC(4,7) RC(4,6)
        >;
    };

    kscan: kscan_0 {
        compatible = "zmk,kscan-gpio-matrix";
        diode-direction = "col2row";
        row-gpios
            = <&pro_micro 21 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&pro_micro 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&pro_micro 19 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&pro_micro 18 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&pro_micro 15 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&pro_micro 14 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            ;

        col-gpios
            = <&pro_micro 4 GPIO_ACTIVE_HIGH>
            , <&pro_micro 5 GPIO_ACTIVE_HIGH>
            , <&pro_micro 6 GPIO_ACTIVE_HIGH>
            , <&pro_micro 7 GPIO_ACTIVE_HIGH>
            , <&pro_micro 8 GPIO_ACTIVE_HIGH>
            , <&pro_micro 9 GPIO_ACTIVE_HIGH>
            ;
    };

    left_encoder: encoder_0 {
        compatible = "alps,ec11";
        a-gpios = <&pro_micro 16 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        b-gpios = <&pro_micro 0 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        steps = <80>;
        status = "disabled";
    };

    right_encoder: encoder_1 {
        compatible = "alps,ec11";
        a-gpios = <&pro_micro 0 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        b-gpios = <&pro_micro 16 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        steps = <80>;
        status = "disabled";
    };

    sensors: sensors_0 {
            compatible = "zmk,keymap-sensors";
            sensors = <&left_encoder &right_encoder>;
            triggers-per-rotation = <20>;
    };

};

&pro_micro_i2c {
    status = "okay";

    oled: ssd1306@3c {
        compatible = "solomon,ssd1306fb";
        reg = <0x3c>;
        width = <128>;
        height = <32>;
        segment-offset = <0>;
        page-offset = <0>;
        display-offset = <0>;
        multiplex-ratio = <31>;
        segment-remap;
        com-invdir;
        com-sequential;
        inversion-on;
        prechargep = <0x22>;
    };
};
